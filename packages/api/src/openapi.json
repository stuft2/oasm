{
  "openapi": "3.0.3",
  "info": {
    "version": "1.0.0",
    "title": "OpenAPI Specification Manager",
    "license": {
      "name": "Apache-2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.txt"
    },
    "description": "An OpenAPI Specification Manager for discovering and versioning OpenAPI documents across an organization. Document semantic versioning is enforced by checking the version of the document during the upload process.",
    "contact": {
      "name": "Spencer Tuft",
      "email": "spencer.tuft@gmail.com"
    }
  },
  "paths": {
    "/accounts": {
      "x-controller": "account",
      "post": {
        "summary": "create an account",
        "description": "Creates a new account for a user or organization. All accounts are treated as organizations and not individuals.",
        "operationId": "createAccount",
        "x-operation": "create",
        "tags": [
            "Accounts"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/account"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "created a resource",
            "headers": {
              "location": {
                "description": "the location of the resource",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/simple_metadata"
                    },
                    {
                      "$ref": "#/components/schemas/account"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/accounts/{accountId}": {
      "x-controller": "account",
      "parameters": [
        {
          "$ref": "#/components/parameters/accountId"
        }
      ],
      "get": {
        "summary": "get account information",
        "description": "Returns nonsensitive account information such as names and email address",
        "operationId": "getAccountInfo",
        "x-operation": "retrieve",
        "security": [
          {
            "bearer": [

            ]
          }
        ],
        "tags": [
            "Accounts"
        ],
        "responses": {
          "200": {
            "description": "returns account information",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/simple_metadata"
                    },
                    {
                      "$ref": "#/components/schemas/account"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "summary": "update account information",
        "description": "Updates the fields in the account information that are provided",
        "operationId": "updateAccountInfo",
        "x-operation": "update",
        "security": [
          {
            "bearer": [

            ]
          }
        ],
        "tags": [
            "Accounts"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/account"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "returns the updated account information",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/simple_metadata"
                    },
                    {
                      "$ref": "#/components/schemas/account"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "deactivate account",
        "description": "Deactivates the account. Signing in again will reactivate the account. Deactivated accounts will not show up in public searches. This does not delete or deprecate documents under the account.",
        "operationId": "deactivateAccount",
        "x-operation": "deactivate",
        "security": [
          {
            "bearer": [

            ]
          }
        ],
        "tags": [
            "Accounts"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/session": {
      "x-controller": "session",
      "post": {
        "summary": "login",
        "description": "Establishes a session with the client using JSON Web Tokens",
        "operationId": "login",
        "x-operation": "create",
        "tags": [
            "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/session"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "returns the authentication information",
            "headers": {
              "location": {
                "description": "the location of the resource",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/simple_metadata"
                    },
                    {
                      "$ref": "#/components/schemas/session"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/tokens": {
      "x-controller": "access-token",
      "get": {
        "summary": "list access tokens",
        "description": "Lists the access token metadata associated with the account. It does not return the access tokens.",
        "operationId": "listAccessTokens",
        "x-operation": "list",
        "security": [
          {
            "bearer": [

            ]
          }
        ],
        "tags": [
            "Access Tokens"
        ],
        "responses": {
          "200": {
            "description": "returns the list of access tokens generated",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/collection_metadata"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "values": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/token"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "generate access token",
        "description": "Generates a new access token associated with the account of the calling identity. The access token is only returned in the response of this call.",
        "operationId": "generateAccessTokens",
        "x-operation": "generate",
        "security": [
          {
            "bearer": [

            ]
          }
        ],
        "tags": [
            "Access Tokens"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/token"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "returns the generated access token",
            "headers": {
              "location": {
                "description": "the location of the resource",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/collection_metadata"
                    },
                    {
                      "$ref": "#/components/schemas/token"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/tokens/{tokenId}": {
      "x-controller": "access-token",
      "parameters": [
        {
          "$ref": "#/components/parameters/tokenId"
        }
      ],
      "delete": {
        "summary": "revoke access token",
        "description": "Removes the access token from the caller account.",
        "operationId": "revokeAccessToken",
        "x-operation": "revoke",
        "security": [
          {
            "bearer": [

            ]
          }
        ],
        "tags": [
            "Access Tokens"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/documents": {
      "x-controller": "catalog",
      "get": {
        "summary": "search document catalog",
        "description": "Filters through the OpenAPI documents in the service based on the query parameters provided.",
        "operationId": "searchDocumentCatalog",
        "x-operation": "search",
        "tags": [
            "Documents"
        ],
        "responses": {
          "200": {
            "description": "returns a list of documents",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/collection_metadata"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "values": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/document_info"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "publish a document version",
        "description": "Publishes an OpenAPI document. Versions must be unique.",
        "operationId": "publishDocumentVersion",
        "x-operation": "publish",
        "security": [
          {
            "bearer": [

            ]
          }
        ],
        "tags": [
            "Documents"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/document"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "create a new document",
            "headers": {
              "location": {
                "description": "the location of the resource",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/documents/{documentId}/versions": {
      "x-controller": "document",
      "parameters": [
        {
          "$ref": "#/components/parameters/documentId"
        }
      ],
      "get": {
        "summary": "list document versions",
        "description": "Lists the document version history for discovery and browsing purposes.",
        "operationId": "listDocumentVersions",
        "x-operation": "list",
        "tags": [
            "Documents"
        ],
        "responses": {
          "200": {
            "description": "returns a list of document versions",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/collection_metadata"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "values": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/document_info"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/documents/{documentId}/versions/{version}": {
      "x-controller": "document",
      "parameters": [
        {
          "$ref": "#/components/parameters/documentId"
        },
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "get": {
        "summary": "get a document",
        "description": "Returns a specific version of an OpenAPI document. The version string follows the semantic version specification described at https://semver.org.",
        "operationId": "getDocument",
        "x-operation": "retrieve",
        "tags": [
            "Documents"
        ],
        "responses": {
          "200": {
            "description": "returns the document",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/simple_metadata"
                    },
                    {
                      "$ref": "#/components/schemas/document"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/documents/{documentId}/versions/{version}/dependencies": {
      "x-controller": "dependency",
      "parameters": [
        {
          "$ref": "#/components/parameters/documentId"
        },
        {
          "$ref": "#/components/parameters/version"
        }
      ],
      "get": {
        "summary": "list dependencies",
        "description": "Lists the dependencies of the given document version. Dependencies are external references referenced within the document.",
        "operationId": "listDependencies",
        "x-operation": "list",
        "tags": [
            "Documents"
        ],
        "responses": {
          "200": {
            "description": "returns a list of document dependencies",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/collection_metadata"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "values": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/document_info"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/documents/{documentId}/maintainers": {
      "x-controller": "maintainer",
      "parameters": [
        {
          "$ref": "#/components/parameters/documentId"
        }
      ],
      "get": {
        "summary": "list maintainers",
        "description": "Lists the maintainers for a given document.",
        "operationId": "listDocumentMaintainers",
        "x-operation": "list",
        "security": [
          {
            "bearer": [

            ]
          }
        ],
        "tags": [
            "Documents"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/roles"
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of maintainers for a document",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/collection_metadata"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "values": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/maintainer"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "invite maintainer",
        "operationId": "inviteMaintainer",
        "x-operation": "invite",
        "security": [
          {
            "bearer": [

            ]
          }
        ],
        "tags": [
            "Documents"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/maintainer"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Sends an invite to a user to be a document maintainer"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/document/{documentId}/maintainers/{accountId}": {
      "x-controller": "maintainer",
      "parameters": [
        {
          "$ref": "#/components/parameters/documentId"
        },
        {
          "$ref": "#/components/parameters/accountId"
        }
      ],
      "patch": {
        "summary": "acknowledge maintainer invite",
        "description": "Accept or deny an invite to assume a role for the specified OpenAPI document.",
        "operationId": "acknowledgeMaintainerInvite",
        "x-operation": "acknowledge",
        "security": [
          {
            "bearer": [

            ]
          }
        ],
        "tags": [
            "Documents"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/acknowledgement"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "updates the maintainer invite",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/collection_metadata"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "values": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/maintainer"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "remove maintainer",
        "description": "Removes a maintainer from a given document. Only an admin or self-serving account may do so. A document must always have at least one admin maintainer.",
        "operationId": "removeDocumentMaintainer",
        "x-operation": "remove",
        "security": [
          {
            "bearer": [

            ]
          }
        ],
        "tags": [
            "Documents"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "collection_metadata": {
        "title": "Collection Metadata",
        "description": "The collection metadata is returned for responses that contain lists which are usually paginated.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/simple_metadata"
          },
          {
            "type": "object",
            "properties": {
              "collection_size": {
                "type": "number"
              },
              "limit": {
                "type": "number"
              },
              "offset": {
                "type": "number"
              }
            }
          }
        ]
      },
      "simple_metadata": {
        "title": "Simple Metadata",
        "description": "The simple metadata is returned for single resource responses.",
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "properties": {
              "validation_response": {
                "$ref": "#/components/schemas/validation_response"
              },
              "validation_information": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "validation_response": {
        "title": "Validation Response",
        "description": "The validation response contains the status code and a message from the server describing the reason for the given status code response.",
        "type": "object",
        "properties": {
          "code": {
            "type": "number",
            "readOnly": true
          },
          "message": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "session": {
        "title": "Session",
        "description": "A session allows the web service to authenticate and identify an individual without the repeated use of their username/password combination.",
        "type": "object",
        "properties": {
          "jwt": {
            "type": "string",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "writeOnly": true
          },
          "password": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "account": {
        "title": "Account",
        "description": "The information requisite for providing services for an entity. The username is necessary for assisting clients in looking up other accounts. The email may be used to login but it's primary function is for sending business communications to the entity.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "writeOnly": true
          },
          "email": {
            "type": "string",
            "format": "email"
          }
        }
      },
      "token": {
        "title": "Token",
        "description": "A token is necessary for publishing documents from the command line or for granting access to third party integrations. The location and date-time associated with the token help the client identify when and where tokens were last used.",
        "type": "object",
        "required": [
          "id",
          "description",
          "lastUsed"
        ],
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "description": {
            "type": "string"
          },
          "token": {
            "type": "string",
            "writeOnly": true
          },
          "lastUsed": {
            "type": "object",
            "readOnly": true,
            "properties": {
              "location": {
                "type": "string"
              },
              "datetime": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "document": {
        "title": "Document",
        "description": "Supports v2.0 and v3.0 of the OpenAPI specification"
      },
      "document_info": {
        "title": "Document Info Object",
        "description": "The respective Info Object for the version of OpenAPI used."
      },
      "maintainer": {
        "title": "Maintainer",
        "description": "A maintainer may be granted privileges for a specific document. Admin privileges indicate that the account can modify metadata associated with the document and deprecate the document.",
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "writeOnly": true
          },
          "role": {
            "type": "string",
            "enum": [
                "admin",
                "write",
                "read"
            ]
          }
        }
      },
      "acknowledgement": {
        "title": "Acknowledgement",
        "description": "For an account to be granted privileges for a specific document, they must accept the invitation sent by a document administrator. Only then can they exercise the privileges they were granted.",
        "type": "object",
        "properties": {
          "acknowledged": {
            "type": "boolean",
            "writeOnly": true
          }
        }
      }
    },
    "responses": {
      "204": {
        "description": "there is not additional content to send"
      },
      "400": {
        "description": "the request body was malformatted",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/simple_metadata"
            }
          }
        }
      },
      "401": {
        "description": "the requester was not authenticated",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/simple_metadata"
            }
          }
        }
      },
      "403": {
        "description": "the requester was unauthorized to make the request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/simple_metadata"
            }
          }
        }
      },
      "404": {
        "description": "the resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/simple_metadata"
            }
          }
        }
      },
      "500": {
        "description": "the server could not fulfill the request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/simple_metadata"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearer": {
        "type": "http",
        "description": "browser authentication",
        "scheme": "bearer",
        "bearerFormat": "bearer {token}"
      }
    },
    "parameters": {
      "accountId": {
        "name": "accountId",
        "description": "The username of the account",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "tokenId": {
        "name": "tokenId",
        "description": "The unique identifier for an access token",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "documentId": {
        "name": "documentId",
        "description": "The name of an OpenAPI document",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "version": {
        "name": "version",
        "description": "The semantic version of an OpenAPI document",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "roles": {
        "name": "roles",
        "description": "filters the list of maintainers by their role",
        "in": "query",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
                "admin",
                "write",
                "read"
            ]
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Auth"
    },
    {
      "name": "Accounts"
    },
    {
      "name": "Access Tokens"
    },
    {
      "name": "Documents"
    }
  ]
}
